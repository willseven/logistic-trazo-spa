"use client";
import { useQuery } from "@tanstack/react-query";
import { api } from "@/lib/api";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface ProcedureType {
  id: number;
  name: string;
  step: number;
  pending: number;
  procedureId: number;
  optional: boolean;
  emailCompany: string;
  procedureNumber: number;
  fields: FieldType[];
}

interface FieldType {
  id: number;
  fieldProcessStepId: number;
  order: number;
  name: string;
  initial: string;
  validate: boolean;
  tableDisplay: boolean;
  clientDisplay: boolean;
  lockEdition: boolean;
  type: string;
  label: string;
  unique: boolean;
  url: string;
  allowModification: boolean;
  format: string;
  autoGenerated: boolean;
  color: string;
  fatherFieldId: number | null;
  fatherField: string | null;
  dataSets: any[];
}

const CreateFormCotizacion = ({ idcompany }: { idcompany: number }) => {
  let token: string | null = null;

  if (typeof window !== "undefined") {
    token = localStorage.getItem("token");
  }

  const { data, isLoading, isError, error, refetch } = useQuery<ProcedureType>({
    queryKey: ["procedure", idcompany],
    queryFn: async () => {
      const response = await api.get(`processstep/96/procedure/${idcompany}?type=2`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      return response.data;
    },
    enabled: false,
  });

  const [formValues, setFormValues] = useState<{ [key: string]: any }>({});

  useEffect(() => {
    if (token) {
      refetch();
    }
  }, [idcompany, token, refetch]);

  const handleInputChange = (name: string, value: any) => {
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    console.log(formValues);
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <form onSubmit={handleSubmit}>
      {data?.fields.map((field) => (
        <div key={field.id} className="mb-4">
          <label className="block text-sm font-medium text-gray-700">{field.label}</label>
          {field.type === "text" && (
            <Input
              type="text"
              value={formValues[field.name] || ""}
              onChange={(e) => handleInputChange(field.name, e.target.value)}
            />
          )}
          {field.type === "selectGet" && (
            <SelectGetComponent field={field} handleInputChange={handleInputChange} />
          )}
        </div>
      ))}
      <Button type="submit">Enviar</Button>
    </form>
  );
};

interface SelectGetComponentProps {
  field: FieldType;
  handleInputChange: (name: string, value: any) => void;
}

const SelectGetComponent = ({ field, handleInputChange }: SelectGetComponentProps) => {
    const token = localStorage.getItem("token");
    const { data, isLoading, isError, error, refetch } = useQuery<any[]>({
    queryKey: [field.url],
    queryFn: async () => {
      const response = await api.get(`Dropdown/${field.url}/options`,{headers: {
        Authorization: `Bearer ${token}`,
      },});
      return response.data;
    },
  });
  

  if (isLoading) {
    return <div>Loading options...</div>;
  }

  if (isError) {
    return <div>Error loading options: {error.message}</div>;
  }

  return (
    <Select onValueChange={(value) => handleInputChange(field.name, value)}>
      <SelectTrigger>
        <SelectValue placeholder={`${field.label}`} />
      </SelectTrigger>
      <SelectContent>
        {data?.map((option) => (
          <SelectItem key={option.id} value={option.id}>
            {option.name}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

export default CreateFormCotizacion;